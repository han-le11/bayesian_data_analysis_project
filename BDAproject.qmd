---
title: "Bayesian Data Analysis project"
subtitle: "Espoo housing price prediction"
bibliography: ref.bib
csl: ieee.csl
author: anonymous # <-- hand in anonymously
format:
  html:
    toc: true
    code-tools: true
    code-line-numbers: true
    number-sections: true
    mainfont: Georgia, serif
    page-layout: article
  pdf:  
    geometry:
    - left=3cm,top=2cm,bottom=2cm,right=3cm
    number-sections: true
    code-annotations: none
editor: source
link-citations: true
---

:::: {.content-hidden when-format="pdf"}
::: {.callout-warning collapse=true}

## Setup
```{r}
#| label: imports
library(aaltobda)
library(bayesplot)
library(dplyr)
library(ggplot2)
library(ggdist) # for stat_dotsinterval
library(posterior)
library(brms)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)  
library(cmdstanr) 
# Globally specfiy cmdstan backend for brms
options(brms.backend="cmdstanr")
# Tell brms to cache results if possible
options(brms.file_refit="on_change")

# Set more readable themes with bigger font for plotting packages.
ggplot2::theme_set(theme_minimal(base_size = 14))
bayesplot::bayesplot_theme_set(theme_minimal(base_size = 14))

# This registers CmdStan as the backend for compiling cmdstan-chunks.
# check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
# register_knitr_engine(override = FALSE)
knitr::opts_chunk$set(fig.width=7, warning = FALSE, message = FALSE) 
```
:::
::::

# Introduction
In February 2024, the Pellervo Economic Research (PTT) of Finland forecasts that the housing prices in Espoo will increase by 1.7\% because of the influx of people moving to Espoo @ptt2024. Prediction of housing prices helps individuals and businesses make informed decisions about buying, selling, or investing in housing properties. For people planning to buy a house in Espoo, housing price prediction helps with financial planning and estimating the mortgage. For real estate professionals, economists, and policymakers, housing price prediction provides insights into factors that influence housing supply and demand, as well as urban development patterns. For example, housing price predictive models can help identify areas with affordable housing options, address housing inequality, and promote inclusive urban development. In addition, for banks, mortgage lenders, and other financial organizations, predicting housing prices is essential for assessing the risk associated with lending and investment activities.

However, housing price prediction can be challenging. The relationships between housing attributes and prices may not be linear. Many factors such as age, size, and type of building can influence prices. In this project, our goal is to model the effects of Espoo housing attributes on their housing prices, using linear and non-linear Bayesian multivariate models. Regarding the linear model, we investigate two variables—the age and the size of the house. For the non-linear model, we also add hierarchy.

The structure of the report is as follows. Section 2 describes the data and the analysis problem. Section 3 describes the Bayesian models used for analysis. Section 4 presents our analysis with the linear model and Section 5 for the non-linear model. 


# Description of the data and the analysis

## General description
The housing price dataset is obtained from Asuntojen Hintatiedot @asunto, which can be translated into Price Information of Housing. This dataset can be viewed and downloaded from [here](https://drive.google.com/file/d/1VMD4fkEzAcP71FXoBq6P5i0Rme04AugG/view?usp=sharing). At the time of conducting the analysis and making this report, to our knowledge, there are no other existing analyses with this housing dataset.

In the original dataset, there are 901 observations and 10 variables. Each variable contains certain information about a house. We add a variable called $Age = 2024 - ProductionYear$ to compute the age of a house based on the year it was produced and to investigate the effect of house's age on its price. 


:::: {.content-hidden when-format="pdf"}
::: {.callout-warning collapse=true}

Hiding in the pdf report because not all are needed to show. Feel free to adjust!
```{r}
HouseData = read.csv('data/housing-data.csv', header=TRUE)
HouseData = HouseData %>% 
  mutate(Age = 2024 - ProductionYear, 
         IncomeClass = round(Income, digits = -2)
         ) %>% 
  filter(Age <= 80)
```

```{r}
# some plots of the raw data
hist(HouseData$IncomeClass)
hist(HouseData$Income)
hist(HouseData$Rooms)
hist(HouseData$Price)
```

```{r}
# ggplot(data = HouseData %>% filter(
#   Rooms <= 2, 
#   Age <= 80)) + 
#   geom_point(aes(Age,Price, color = BuildingType))
# 
# ggplot(data = HouseData %>% filter(
#   Rooms > 2, 
#   Age <= 80)) + 
#   geom_point(aes(Age,Price, color = BuildingType))
# 
# ggplot(data = HouseData %>% filter(
#   Age <= 80)) + 
#   geom_point(aes(Size,Rooms, color = BuildingType), alpha = 0.5)
```
:::
::::

There are 8 empty cells in column \textit{Condition} and 30 in column \textit{LandOwnership}. Therefore, these two parameters are not chosen for the Bayesian models in this report.

```{r echo=FALSE}
head(HouseData, 5)
```
## Exploratory data analysis

In this part, we present how we use visualisation learn more about the dataset `HouseData`. We plot some histograms to explore the range of Espoo housing size and age. As observed in the histograms below, most houses fall in the range of square meter. Most houses age from 0 to 10 years. Besides, all house sizes and ages in the dataset are positive values, as they should. 

```{r hist_size, echo=FALSE}
hist_size = hist(HouseData$Size, 
                 main = "Size of houses in Espoo (2024)", 
                 xlab = "Square metre")
```

```{r hist_age, echo=FALSE}
hist_age = hist(HouseData$Age, main = "Age of houses in Espoo (2024)", xlab = "Age")
```

There are three building types in the dataset: apartment, detached, and row house. Since the building type can also affect the price, we explore the overall relationship between housing price and age as well as size, grouped by the building type. The scatter plots below suggest that overall, apartment is the cheapest, followed by row house. Detached house is the most expensive. 

```{r echo=FALSE}
ggplot(data = HouseData %>% filter(
  Age <= 80)) + 
  geom_point(aes(Age, Price, color = BuildingType)) +
  scale_color_manual(labels=c("Apartment house", "Detached house", "Row house"), values = c("indianred", "darkseagreen", "steelblue")) + 
  labs(
    title = "Housing price & age by building type",
  )
```
```{r echo=FALSE}
ggplot(data = HouseData %>% filter(
  Age <= 80)) + 
  geom_point(aes(Size, Price, color = BuildingType)) +
  scale_color_manual(labels=c("Apartment house", "Detached house", "Row house"), values = c("indianred", "darkseagreen", "steelblue")) + 
  labs(
    title = "Housing price & size by building type",
    x = "Size (square meter)",
  )
```

Comment: This plot for each postal code is a bit confusing and hard to read?
```{r}
# plots for each postal code
ggplot(data = HouseData %>% filter(
  Age <= 80)) + 
  geom_point(aes(Age, PricePerSquare, color = BuildingType)) + facet_wrap(~IncomeClass)
```

# Models 

## Linear model
As a practice, we start with a simple linear model with two variable—housing size and age. The formula of the linear model is below 


## Non-linear model with hierarchy

# Analysis with the linear model

This section shows the code of our linear model with Gaussian noise and how the Markov chain Monte Carlo (MCMC) inference was run. We also shows the convergence diagnostic values for the linear model and their interpretation. In addition, we report posterior predictive checks.

## Priors
In the linear model, we choose a normal prior of $(\mu = 5000, 1500)$ for the housing size.

## MCMC inference

To fit the model and run MCMC inference, we use `brms`—a high-level interface for Stan providing tools to create a wide range of Bayesian models. 

```{r}
fit1 = brms::brm(Price ~ Size + Age,
           data = HouseData,
           family = gaussian(),
           prior = c(
             prior(normal(5000, 1500), class = b, coef = Size),
             prior(normal(1000, 5000), class = b, coef = Age),
             prior(normal(100000, 30000), class = Intercept)
             ),
           refresh=0, 
           show_exceptions = FALSE,
           # This causes brms to cache the results
           file="fit1.rds" 
           )
```


:::: {.content-hidden when-format="pdf"}
::: {.callout-warning collapse=true}

```{r}
fit1 <- readRDS("fit1.rds")
saveRDS(fit1, file="fit1")
```

:::: 
::: 

## Convergence diagnostic 
```{r}
posterior::rhat_basic(fit1)
```

To obtain summaries and convergence diagnostic of the fitted linear model , we call the function `summary()`. 
```{r}
summary(fit1)
```
## Posterior predictive check

By using function `plot()`, we can plot the MCMC chains as well as the posterior distributions for each parameter. 
```{r}
plot(fit1) 
``` 

```{r}
brms::loo(fit1)
brms::pp_check(fit1)
```

```{r echo=FALSE}
# hide the code in pdf 
ggplot2::ggplot(data = HouseData %>% filter(
  Rooms <= 4, 
  Age <= 80,  
  BuildingType == 'kt')) + 
  ggplot2::geom_point(aes(Age,Price, color = Rooms)) + 
  ggplot2::geom_abline(intercept = 
                fixef(fit1)[1] + 
                fixef(fit1)[2]*mean(HouseData$Size), 
              slope = 
                brms::fixef(fit1)[3]) +
  labs(
    title = "Espoo apartment price grouped by number of rooms",
  )
```

## Sensitivity analysis

Sensitivity analysis is conducted with respect to prior choices (i.e., checking whether the result changes a lot if prior is changed).



# Non-linear model

The structure of our analysis with the non-linear model is similar to that of the linear model. We first fit the model, then report convergence diagnostics, posterior predictive checks, and sensitivity analysis. 

## MCMC inference
Non-linear models require the bf() around the model specification together with 'nl = TRUE'. The parameters of the model must be specified by b ~ 1 for example, or b ~ 1 + (1|z) if the parameter b varies in groups z.
```{r}
fit2 =  brms::brm(bf(Price ~ b1*Size + b2*Age + b3*Age^2 + b4,
                   b1 ~ 1, 
                   b2 ~ 1 + (1|PostalCode),
                   b3 ~ 1 + (1|PostalCode),
                   b4 ~ 1 + (1|PostalCode),
                   nl = TRUE
                   ),
           data = HouseData,
           family = gaussian(),
           prior = c(
             prior(normal(5000, 1500), nlpar = 'b1'),
             prior(normal(-1000, 5000), nlpar = 'b2'),
             prior(normal(0, 1000), nlpar = 'b3'),
             prior(normal(100000, 30000), nlpar = 'b4')
             ),
           refresh = 0,
           show_exceptions = FALSE,
           # This causes brms to cache the results
           file="fit2.rds"
           )
```

:::: {.content-hidden when-format="pdf"}
::: {.callout-warning collapse=true}

Hide the summary in the pdf because it looks hard to follow.
```{r}
fit2 <- readRDS("fit2.rds")
```

```{r}
saveRDS(fit2, file="fit2")
summary(fit2)
```
:::: 
::: 

## Convergence diagnostic 

To obtain summaries of the fitted model, we again apply function `summary()` in `brms` package. 

```{r}
plot(brms::conditional_effects(fit2), points = TRUE)
```


## Posterior predictive check

```{r}
brms::pp_check(fit2)
```
## Sensitivity analysis


# Model comparison 
```{r echo=FALSE}
brms::loo(fit2)
```

# Discussion

# Conclusion

# References

::: {#refs}
:::

# Appendix